#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl 4, %eax		# src and dst have 4 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
	# Function prologue. Do not modify.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 12(%ebp),%ecx	# dst
	mrmovl 16(%ebp),%edx	# len

	# Loop header
	xorl %esi,%esi		# count = 0;
	andl %edx,%edx		# len <= 0?
	jle Done		# if so, goto Done:

	# Loop body.
Loop:	mrmovl (%ebx), %eax	# read val from src...
	rmmovl %eax, (%ecx)	# ...and store it to dst
	andl %eax, %eax		# val <= 0?
	jle Npos		# if so, goto Npos:
	irmovl $1, %edi
	addl %edi, %esi		# count++
Npos:	irmovl $1, %edi
	subl %edi, %edx		# len--
	irmovl $4, %edi
	addl %edi, %ebx		# src++
	addl %edi, %ecx		# dst++
	andl %edx,%edx		# len > 0?
	jg Loop			# if so, goto Loop:

	# Function epilogue. Do not modify.
Done:	rrmovl %esi, %eax
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
#/* $end ncopy-ys */
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

###############################
# Source and destination blocks 
###############################
	.align 4
src:	.long 0
	.long 1
	.long 2
	.long 3
	.long 4
	.long 5
	.long 6
	.long 7
	.long 8
	.long 9
	.long 10
	.long 11
	.long 12
	.long 13
	.long 14
	.long 15
	.long 16
	.long 17
	.long 18
	.long 19
	.long 20
	.long 21
	.long 22
	.long 23
	.long 24
	.long 25
	.long 26
	.long 27
	.long 28
	.long 29
	.long 30
	.long 31
	.long 32
	.long 33
	.long 34
	.long 35
	.long 36
	.long 37
	.long 38
	.long 39
	.long 40
	.long 41
	.long 42
	.long 43
	.long 44
	.long 45
	.long 46
	.long 47
	.long 48
	.long 49
	.long 50
	.long 51
	.long 52
	.long 53
	.long 54
	.long 55
	.long 56
	.long 57
	.long 58
	.long 59
	.long 60
	.long 61
	.long 62
	.long 63
        .long 0x0f0f0f0f # This shouldn't get moved

	.align 16
dest:	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xdeadbeef

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
Stack:
